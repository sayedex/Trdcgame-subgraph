// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BuyWeapon extends ethereum.Event {
  get params(): BuyWeapon__Params {
    return new BuyWeapon__Params(this);
  }
}

export class BuyWeapon__Params {
  _event: BuyWeapon;

  constructor(event: BuyWeapon) {
    this._event = event;
  }

  get WeaponName(): string {
    return this._event.parameters[0].value.toString();
  }

  get WeaponPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GetCop extends ethereum.Event {
  get params(): GetCop__Params {
    return new GetCop__Params(this);
  }
}

export class GetCop__Params {
  _event: GetCop;

  constructor(event: GetCop) {
    this._event = event;
  }

  get CopName(): string {
    return this._event.parameters[0].value.toString();
  }

  get CopPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GetThief extends ethereum.Event {
  get params(): GetThief__Params {
    return new GetThief__Params(this);
  }
}

export class GetThief__Params {
  _event: GetThief;

  constructor(event: GetThief) {
    this._event = event;
  }

  get ThiefName(): string {
    return this._event.parameters[0].value.toString();
  }

  get ThiefPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GetWeapon extends ethereum.Event {
  get params(): GetWeapon__Params {
    return new GetWeapon__Params(this);
  }
}

export class GetWeapon__Params {
  _event: GetWeapon;

  constructor(event: GetWeapon) {
    this._event = event;
  }

  get WeaponName(): string {
    return this._event.parameters[0].value.toString();
  }

  get WeaponPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GiveTreasure extends ethereum.Event {
  get params(): GiveTreasure__Params {
    return new GiveTreasure__Params(this);
  }
}

export class GiveTreasure__Params {
  _event: GiveTreasure;

  constructor(event: GiveTreasure) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get Amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get Amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawalBNB extends ethereum.Event {
  get params(): WithdrawalBNB__Params {
    return new WithdrawalBNB__Params(this);
  }
}

export class WithdrawalBNB__Params {
  _event: WithdrawalBNB;

  constructor(event: WithdrawalBNB) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawalToken extends ethereum.Event {
  get params(): WithdrawalToken__Params {
    return new WithdrawalToken__Params(this);
  }
}

export class WithdrawalToken__Params {
  _event: WithdrawalToken;

  constructor(event: WithdrawalToken) {
    this._event = event;
  }

  get _tokenAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class copHeist extends ethereum.Event {
  get params(): copHeist__Params {
    return new copHeist__Params(this);
  }
}

export class copHeist__Params {
  _event: copHeist;

  constructor(event: copHeist) {
    this._event = event;
  }

  get AmountCollected(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get AmountBurned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get AmountBackToRewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class thiefHeist extends ethereum.Event {
  get params(): thiefHeist__Params {
    return new thiefHeist__Params(this);
  }
}

export class thiefHeist__Params {
  _event: thiefHeist;

  constructor(event: thiefHeist) {
    this._event = event;
  }

  get Bank(): string {
    return this._event.parameters[0].value.toString();
  }

  get BankPower(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get Thief(): string {
    return this._event.parameters[2].value.toString();
  }

  get ThiefPower(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get Result(): string {
    return this._event.parameters[4].value.toString();
  }

  get Amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TRDCvault__TRDCplayerResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;

  constructor(value0: boolean, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TRDCvault__banksResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: string, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TRDCvault__buyWeaponResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__cardCopResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__cardThiefResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__copCardOwnedResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__getBigVaultResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__giveCopCardV1Result {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__giveWeaponV1Result {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__playerStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class TRDCvault__runCopResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TRDCvault__thiefCardsOwnedResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TRDCvault__weaponsResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: string, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TRDCvault__weaponsOwnedResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: string, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TRDCvault extends ethereum.SmartContract {
  static bind(address: Address): TRDCvault {
    return new TRDCvault("TRDCvault", address);
  }

  PlayerID(param0: BigInt): Address {
    let result = super.call("PlayerID", "PlayerID(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_PlayerID(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("PlayerID", "PlayerID(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TRDCplayer(_player: Address): TRDCvault__TRDCplayerResult {
    let result = super.call(
      "TRDCplayer",
      "TRDCplayer(address):(bool,bool,uint256)",
      [ethereum.Value.fromAddress(_player)]
    );

    return new TRDCvault__TRDCplayerResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt()
    );
  }

  try_TRDCplayer(
    _player: Address
  ): ethereum.CallResult<TRDCvault__TRDCplayerResult> {
    let result = super.tryCall(
      "TRDCplayer",
      "TRDCplayer(address):(bool,bool,uint256)",
      [ethereum.Value.fromAddress(_player)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__TRDCplayerResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt()
      )
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveOnBothSides(): boolean {
    let result = super.call(
      "approveOnBothSides",
      "approveOnBothSides():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_approveOnBothSides(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveOnBothSides",
      "approveOnBothSides():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bVA(): BigInt {
    let result = super.call("bVA", "bVA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bVA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bVA", "bVA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bankVaultPowerReset(): BigInt {
    let result = super.call(
      "bankVaultPowerReset",
      "bankVaultPowerReset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_bankVaultPowerReset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bankVaultPowerReset",
      "bankVaultPowerReset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  banks(param0: BigInt): TRDCvault__banksResult {
    let result = super.call(
      "banks",
      "banks(uint256):(string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TRDCvault__banksResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_banks(param0: BigInt): ethereum.CallResult<TRDCvault__banksResult> {
    let result = super.tryCall(
      "banks",
      "banks(uint256):(string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__banksResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  busted(param0: Address): boolean {
    let result = super.call("busted", "busted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_busted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("busted", "busted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buyCard(): BigInt {
    let result = super.call("buyCard", "buyCard():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyCard(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyCard", "buyCard():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyWeapon(weaponToBuy: BigInt): TRDCvault__buyWeaponResult {
    let result = super.call(
      "buyWeapon",
      "buyWeapon(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(weaponToBuy)]
    );

    return new TRDCvault__buyWeaponResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_buyWeapon(
    weaponToBuy: BigInt
  ): ethereum.CallResult<TRDCvault__buyWeaponResult> {
    let result = super.tryCall(
      "buyWeapon",
      "buyWeapon(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(weaponToBuy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__buyWeaponResult(value[0].toString(), value[1].toBigInt())
    );
  }

  cardCop(param0: BigInt): TRDCvault__cardCopResult {
    let result = super.call("cardCop", "cardCop(uint256):(string,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new TRDCvault__cardCopResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_cardCop(param0: BigInt): ethereum.CallResult<TRDCvault__cardCopResult> {
    let result = super.tryCall("cardCop", "cardCop(uint256):(string,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__cardCopResult(value[0].toString(), value[1].toBigInt())
    );
  }

  cardNounce(): BigInt {
    let result = super.call("cardNounce", "cardNounce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cardNounce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cardNounce", "cardNounce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cardPrice(): BigInt {
    let result = super.call("cardPrice", "cardPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cardPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cardPrice", "cardPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cardThief(param0: BigInt): TRDCvault__cardThiefResult {
    let result = super.call(
      "cardThief",
      "cardThief(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TRDCvault__cardThiefResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_cardThief(
    param0: BigInt
  ): ethereum.CallResult<TRDCvault__cardThiefResult> {
    let result = super.tryCall(
      "cardThief",
      "cardThief(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__cardThiefResult(value[0].toString(), value[1].toBigInt())
    );
  }

  claimReward(): BigInt {
    let result = super.call("claimReward", "claimReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimReward", "claimReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  copCardOwned(param0: Address, param1: BigInt): TRDCvault__copCardOwnedResult {
    let result = super.call(
      "copCardOwned",
      "copCardOwned(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TRDCvault__copCardOwnedResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_copCardOwned(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TRDCvault__copCardOwnedResult> {
    let result = super.tryCall(
      "copCardOwned",
      "copCardOwned(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__copCardOwnedResult(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  copsYes(): BigInt {
    let result = super.call("copsYes", "copsYes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_copsYes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("copsYes", "copsYes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  copsYesC(): BigInt {
    let result = super.call("copsYesC", "copsYesC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_copsYesC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("copsYesC", "copsYesC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dEaD(): Address {
    let result = super.call("dEaD", "dEaD():(address)", []);

    return result[0].toAddress();
  }

  try_dEaD(): ethereum.CallResult<Address> {
    let result = super.tryCall("dEaD", "dEaD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  endTime(): BigInt {
    let result = super.call("endTime", "endTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endTime", "endTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameOperator(param0: Address): boolean {
    let result = super.call("gameOperator", "gameOperator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_gameOperator(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("gameOperator", "gameOperator(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gamePublish(): BigInt {
    let result = super.call("gamePublish", "gamePublish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gamePublish(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gamePublish", "gamePublish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameRunning(): boolean {
    let result = super.call("gameRunning", "gameRunning():(bool)", []);

    return result[0].toBoolean();
  }

  try_gameRunning(): ethereum.CallResult<boolean> {
    let result = super.tryCall("gameRunning", "gameRunning():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBankVaults(): BigInt {
    let result = super.call("getBankVaults", "getBankVaults():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBankVaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBankVaults",
      "getBankVaults():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBigVault(): TRDCvault__getBigVaultResult {
    let result = super.call(
      "getBigVault",
      "getBigVault():(address,uint256)",
      []
    );

    return new TRDCvault__getBigVaultResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getBigVault(): ethereum.CallResult<TRDCvault__getBigVaultResult> {
    let result = super.tryCall(
      "getBigVault",
      "getBigVault():(address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__getBigVaultResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getInVaults(): BigInt {
    let result = super.call("getInVaults", "getInVaults():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInVaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getInVaults", "getInVaults():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  giveCopCardV1(
    _V1player: Address,
    _copIndex: BigInt
  ): TRDCvault__giveCopCardV1Result {
    let result = super.call(
      "giveCopCardV1",
      "giveCopCardV1(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_copIndex)
      ]
    );

    return new TRDCvault__giveCopCardV1Result(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_giveCopCardV1(
    _V1player: Address,
    _copIndex: BigInt
  ): ethereum.CallResult<TRDCvault__giveCopCardV1Result> {
    let result = super.tryCall(
      "giveCopCardV1",
      "giveCopCardV1(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_copIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__giveCopCardV1Result(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  giveThiefCardV1(
    _V1player: Address,
    _thiefIndex: BigInt,
    _powerOfThief: BigInt
  ): string {
    let result = super.call(
      "giveThiefCardV1",
      "giveThiefCardV1(address,uint256,uint256):(string)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_thiefIndex),
        ethereum.Value.fromUnsignedBigInt(_powerOfThief)
      ]
    );

    return result[0].toString();
  }

  try_giveThiefCardV1(
    _V1player: Address,
    _thiefIndex: BigInt,
    _powerOfThief: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "giveThiefCardV1",
      "giveThiefCardV1(address,uint256,uint256):(string)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_thiefIndex),
        ethereum.Value.fromUnsignedBigInt(_powerOfThief)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  giveWeaponV1(
    _V1player: Address,
    _weaponIndex: BigInt
  ): TRDCvault__giveWeaponV1Result {
    let result = super.call(
      "giveWeaponV1",
      "giveWeaponV1(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_weaponIndex)
      ]
    );

    return new TRDCvault__giveWeaponV1Result(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_giveWeaponV1(
    _V1player: Address,
    _weaponIndex: BigInt
  ): ethereum.CallResult<TRDCvault__giveWeaponV1Result> {
    let result = super.tryCall(
      "giveWeaponV1",
      "giveWeaponV1(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(_V1player),
        ethereum.Value.fromUnsignedBigInt(_weaponIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__giveWeaponV1Result(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  half(): BigInt {
    let result = super.call("half", "half():(uint256)", []);

    return result[0].toBigInt();
  }

  try_half(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("half", "half():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isShielded(param0: Address): boolean {
    let result = super.call("isShielded", "isShielded(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isShielded(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isShielded", "isShielded(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  percentageCut(): BigInt {
    let result = super.call("percentageCut", "percentageCut():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percentageCut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "percentageCut",
      "percentageCut():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  player(param0: Address): boolean {
    let result = super.call("player", "player(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_player(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("player", "player(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  playerCount(): BigInt {
    let result = super.call("playerCount", "playerCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_playerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("playerCount", "playerCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playerIsCop(param0: Address): boolean {
    let result = super.call("playerIsCop", "playerIsCop(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_playerIsCop(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("playerIsCop", "playerIsCop(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  playerIsHolder(param0: Address): boolean {
    let result = super.call(
      "playerIsHolder",
      "playerIsHolder(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_playerIsHolder(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "playerIsHolder",
      "playerIsHolder(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  playerStats(param0: Address): TRDCvault__playerStatsResult {
    let result = super.call(
      "playerStats",
      "playerStats(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new TRDCvault__playerStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_playerStats(
    param0: Address
  ): ethereum.CallResult<TRDCvault__playerStatsResult> {
    let result = super.tryCall(
      "playerStats",
      "playerStats(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__playerStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  priceOfShield(): BigInt {
    let result = super.call("priceOfShield", "priceOfShield():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceOfShield(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceOfShield",
      "priceOfShield():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  returnPlayer(param0: Address): boolean {
    let result = super.call("returnPlayer", "returnPlayer(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_returnPlayer(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("returnPlayer", "returnPlayer(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardPercentage(): BigInt {
    let result = super.call(
      "rewardPercentage",
      "rewardPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPercentage",
      "rewardPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundsCount(): BigInt {
    let result = super.call("roundsCount", "roundsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundsCount", "roundsCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  runCop(cardToUse: BigInt): TRDCvault__runCopResult {
    let result = super.call(
      "runCop",
      "runCop(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(cardToUse)]
    );

    return new TRDCvault__runCopResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_runCop(cardToUse: BigInt): ethereum.CallResult<TRDCvault__runCopResult> {
    let result = super.tryCall(
      "runCop",
      "runCop(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(cardToUse)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__runCopResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  startHeistThief(
    cardType: BigInt,
    cardToUse: BigInt,
    bankToHeist: BigInt
  ): string {
    let result = super.call(
      "startHeistThief",
      "startHeistThief(uint256,uint256,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(cardType),
        ethereum.Value.fromUnsignedBigInt(cardToUse),
        ethereum.Value.fromUnsignedBigInt(bankToHeist)
      ]
    );

    return result[0].toString();
  }

  try_startHeistThief(
    cardType: BigInt,
    cardToUse: BigInt,
    bankToHeist: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "startHeistThief",
      "startHeistThief(uint256,uint256,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(cardType),
        ethereum.Value.fromUnsignedBigInt(cardToUse),
        ethereum.Value.fromUnsignedBigInt(bankToHeist)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  thiefCardsOwned(
    param0: Address,
    param1: BigInt
  ): TRDCvault__thiefCardsOwnedResult {
    let result = super.call(
      "thiefCardsOwned",
      "thiefCardsOwned(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TRDCvault__thiefCardsOwnedResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_thiefCardsOwned(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TRDCvault__thiefCardsOwnedResult> {
    let result = super.tryCall(
      "thiefCardsOwned",
      "thiefCardsOwned(address,uint256):(string,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__thiefCardsOwnedResult(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  thiefYesC(): BigInt {
    let result = super.call("thiefYesC", "thiefYesC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_thiefYesC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("thiefYesC", "thiefYesC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toStart(): BigInt {
    let result = super.call("toStart", "toStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_toStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("toStart", "toStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBurned(): BigInt {
    let result = super.call("totalBurned", "totalBurned():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBurned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBurned", "totalBurned():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasure(): Address {
    let result = super.call("treasure", "treasure():(address)", []);

    return result[0].toAddress();
  }

  try_treasure(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasure", "treasure():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vVault(): BigInt {
    let result = super.call("vVault", "vVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vVault", "vVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weapons(param0: BigInt): TRDCvault__weaponsResult {
    let result = super.call(
      "weapons",
      "weapons(uint256):(string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TRDCvault__weaponsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_weapons(param0: BigInt): ethereum.CallResult<TRDCvault__weaponsResult> {
    let result = super.tryCall(
      "weapons",
      "weapons(uint256):(string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__weaponsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  weaponsOwned(param0: Address, param1: BigInt): TRDCvault__weaponsOwnedResult {
    let result = super.call(
      "weaponsOwned",
      "weaponsOwned(address,uint256):(string,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TRDCvault__weaponsOwnedResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_weaponsOwned(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TRDCvault__weaponsOwnedResult> {
    let result = super.tryCall(
      "weaponsOwned",
      "weaponsOwned(address,uint256):(string,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TRDCvault__weaponsOwnedResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _number(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _guessThisToo(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BArrayCall extends ethereum.Call {
  get inputs(): BArrayCall__Inputs {
    return new BArrayCall__Inputs(this);
  }

  get outputs(): BArrayCall__Outputs {
    return new BArrayCall__Outputs(this);
  }
}

export class BArrayCall__Inputs {
  _call: BArrayCall;

  constructor(call: BArrayCall) {
    this._call = call;
  }

  get _bA(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BArrayCall__Outputs {
  _call: BArrayCall;

  constructor(call: BArrayCall) {
    this._call = call;
  }
}

export class AddBankCall extends ethereum.Call {
  get inputs(): AddBankCall__Inputs {
    return new AddBankCall__Inputs(this);
  }

  get outputs(): AddBankCall__Outputs {
    return new AddBankCall__Outputs(this);
  }
}

export class AddBankCall__Inputs {
  _call: AddBankCall;

  constructor(call: AddBankCall) {
    this._call = call;
  }

  get _bankName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _bankPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bankVault(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddBankCall__Outputs {
  _call: AddBankCall;

  constructor(call: AddBankCall) {
    this._call = call;
  }
}

export class AddCopCall extends ethereum.Call {
  get inputs(): AddCopCall__Inputs {
    return new AddCopCall__Inputs(this);
  }

  get outputs(): AddCopCall__Outputs {
    return new AddCopCall__Outputs(this);
  }
}

export class AddCopCall__Inputs {
  _call: AddCopCall;

  constructor(call: AddCopCall) {
    this._call = call;
  }

  get _cName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _cPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCopCall__Outputs {
  _call: AddCopCall;

  constructor(call: AddCopCall) {
    this._call = call;
  }
}

export class AddThiefCall extends ethereum.Call {
  get inputs(): AddThiefCall__Inputs {
    return new AddThiefCall__Inputs(this);
  }

  get outputs(): AddThiefCall__Outputs {
    return new AddThiefCall__Outputs(this);
  }
}

export class AddThiefCall__Inputs {
  _call: AddThiefCall;

  constructor(call: AddThiefCall) {
    this._call = call;
  }

  get _tName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddThiefCall__Outputs {
  _call: AddThiefCall;

  constructor(call: AddThiefCall) {
    this._call = call;
  }
}

export class AddWeaponCall extends ethereum.Call {
  get inputs(): AddWeaponCall__Inputs {
    return new AddWeaponCall__Inputs(this);
  }

  get outputs(): AddWeaponCall__Outputs {
    return new AddWeaponCall__Outputs(this);
  }
}

export class AddWeaponCall__Inputs {
  _call: AddWeaponCall;

  constructor(call: AddWeaponCall) {
    this._call = call;
  }

  get _wName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _wPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _wPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddWeaponCall__Outputs {
  _call: AddWeaponCall;

  constructor(call: AddWeaponCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveOnBothSidesCall extends ethereum.Call {
  get inputs(): ApproveOnBothSidesCall__Inputs {
    return new ApproveOnBothSidesCall__Inputs(this);
  }

  get outputs(): ApproveOnBothSidesCall__Outputs {
    return new ApproveOnBothSidesCall__Outputs(this);
  }
}

export class ApproveOnBothSidesCall__Inputs {
  _call: ApproveOnBothSidesCall;

  constructor(call: ApproveOnBothSidesCall) {
    this._call = call;
  }
}

export class ApproveOnBothSidesCall__Outputs {
  _call: ApproveOnBothSidesCall;

  constructor(call: ApproveOnBothSidesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyCardCall extends ethereum.Call {
  get inputs(): BuyCardCall__Inputs {
    return new BuyCardCall__Inputs(this);
  }

  get outputs(): BuyCardCall__Outputs {
    return new BuyCardCall__Outputs(this);
  }
}

export class BuyCardCall__Inputs {
  _call: BuyCardCall;

  constructor(call: BuyCardCall) {
    this._call = call;
  }
}

export class BuyCardCall__Outputs {
  _call: BuyCardCall;

  constructor(call: BuyCardCall) {
    this._call = call;
  }

  get CardType(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyShieldCall extends ethereum.Call {
  get inputs(): BuyShieldCall__Inputs {
    return new BuyShieldCall__Inputs(this);
  }

  get outputs(): BuyShieldCall__Outputs {
    return new BuyShieldCall__Outputs(this);
  }
}

export class BuyShieldCall__Inputs {
  _call: BuyShieldCall;

  constructor(call: BuyShieldCall) {
    this._call = call;
  }
}

export class BuyShieldCall__Outputs {
  _call: BuyShieldCall;

  constructor(call: BuyShieldCall) {
    this._call = call;
  }
}

export class BuyWeaponCall extends ethereum.Call {
  get inputs(): BuyWeaponCall__Inputs {
    return new BuyWeaponCall__Inputs(this);
  }

  get outputs(): BuyWeaponCall__Outputs {
    return new BuyWeaponCall__Outputs(this);
  }
}

export class BuyWeaponCall__Inputs {
  _call: BuyWeaponCall;

  constructor(call: BuyWeaponCall) {
    this._call = call;
  }

  get weaponToBuy(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyWeaponCall__Outputs {
  _call: BuyWeaponCall;

  constructor(call: BuyWeaponCall) {
    this._call = call;
  }

  get nameOfWeapon(): string {
    return this._call.outputValues[0].value.toString();
  }

  get powerOfWeapon(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ChangeHalfCall extends ethereum.Call {
  get inputs(): ChangeHalfCall__Inputs {
    return new ChangeHalfCall__Inputs(this);
  }

  get outputs(): ChangeHalfCall__Outputs {
    return new ChangeHalfCall__Outputs(this);
  }
}

export class ChangeHalfCall__Inputs {
  _call: ChangeHalfCall;

  constructor(call: ChangeHalfCall) {
    this._call = call;
  }

  get _half(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeHalfCall__Outputs {
  _call: ChangeHalfCall;

  constructor(call: ChangeHalfCall) {
    this._call = call;
  }
}

export class ChangePriceCall extends ethereum.Call {
  get inputs(): ChangePriceCall__Inputs {
    return new ChangePriceCall__Inputs(this);
  }

  get outputs(): ChangePriceCall__Outputs {
    return new ChangePriceCall__Outputs(this);
  }
}

export class ChangePriceCall__Inputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }

  get _cardPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangePriceCall__Outputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get totalAmt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteBankCall extends ethereum.Call {
  get inputs(): DeleteBankCall__Inputs {
    return new DeleteBankCall__Inputs(this);
  }

  get outputs(): DeleteBankCall__Outputs {
    return new DeleteBankCall__Outputs(this);
  }
}

export class DeleteBankCall__Inputs {
  _call: DeleteBankCall;

  constructor(call: DeleteBankCall) {
    this._call = call;
  }

  get bankIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteBankCall__Outputs {
  _call: DeleteBankCall;

  constructor(call: DeleteBankCall) {
    this._call = call;
  }
}

export class DeleteCopCall extends ethereum.Call {
  get inputs(): DeleteCopCall__Inputs {
    return new DeleteCopCall__Inputs(this);
  }

  get outputs(): DeleteCopCall__Outputs {
    return new DeleteCopCall__Outputs(this);
  }
}

export class DeleteCopCall__Inputs {
  _call: DeleteCopCall;

  constructor(call: DeleteCopCall) {
    this._call = call;
  }

  get copIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteCopCall__Outputs {
  _call: DeleteCopCall;

  constructor(call: DeleteCopCall) {
    this._call = call;
  }
}

export class DeleteThiefCall extends ethereum.Call {
  get inputs(): DeleteThiefCall__Inputs {
    return new DeleteThiefCall__Inputs(this);
  }

  get outputs(): DeleteThiefCall__Outputs {
    return new DeleteThiefCall__Outputs(this);
  }
}

export class DeleteThiefCall__Inputs {
  _call: DeleteThiefCall;

  constructor(call: DeleteThiefCall) {
    this._call = call;
  }

  get thiefIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteThiefCall__Outputs {
  _call: DeleteThiefCall;

  constructor(call: DeleteThiefCall) {
    this._call = call;
  }
}

export class DeleteWeaponCall extends ethereum.Call {
  get inputs(): DeleteWeaponCall__Inputs {
    return new DeleteWeaponCall__Inputs(this);
  }

  get outputs(): DeleteWeaponCall__Outputs {
    return new DeleteWeaponCall__Outputs(this);
  }
}

export class DeleteWeaponCall__Inputs {
  _call: DeleteWeaponCall;

  constructor(call: DeleteWeaponCall) {
    this._call = call;
  }

  get weaponIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteWeaponCall__Outputs {
  _call: DeleteWeaponCall;

  constructor(call: DeleteWeaponCall) {
    this._call = call;
  }
}

export class EditBankCall extends ethereum.Call {
  get inputs(): EditBankCall__Inputs {
    return new EditBankCall__Inputs(this);
  }

  get outputs(): EditBankCall__Outputs {
    return new EditBankCall__Outputs(this);
  }
}

export class EditBankCall__Inputs {
  _call: EditBankCall;

  constructor(call: EditBankCall) {
    this._call = call;
  }

  get bankIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bankPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bankVault(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EditBankCall__Outputs {
  _call: EditBankCall;

  constructor(call: EditBankCall) {
    this._call = call;
  }
}

export class EditCopCall extends ethereum.Call {
  get inputs(): EditCopCall__Inputs {
    return new EditCopCall__Inputs(this);
  }

  get outputs(): EditCopCall__Outputs {
    return new EditCopCall__Outputs(this);
  }
}

export class EditCopCall__Inputs {
  _call: EditCopCall;

  constructor(call: EditCopCall) {
    this._call = call;
  }

  get copIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EditCopCall__Outputs {
  _call: EditCopCall;

  constructor(call: EditCopCall) {
    this._call = call;
  }
}

export class EditThiefCall extends ethereum.Call {
  get inputs(): EditThiefCall__Inputs {
    return new EditThiefCall__Inputs(this);
  }

  get outputs(): EditThiefCall__Outputs {
    return new EditThiefCall__Outputs(this);
  }
}

export class EditThiefCall__Inputs {
  _call: EditThiefCall;

  constructor(call: EditThiefCall) {
    this._call = call;
  }

  get thiefIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EditThiefCall__Outputs {
  _call: EditThiefCall;

  constructor(call: EditThiefCall) {
    this._call = call;
  }
}

export class EditWeaponCall extends ethereum.Call {
  get inputs(): EditWeaponCall__Inputs {
    return new EditWeaponCall__Inputs(this);
  }

  get outputs(): EditWeaponCall__Outputs {
    return new EditWeaponCall__Outputs(this);
  }
}

export class EditWeaponCall__Inputs {
  _call: EditWeaponCall;

  constructor(call: EditWeaponCall) {
    this._call = call;
  }

  get weaponIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wPower(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _wPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EditWeaponCall__Outputs {
  _call: EditWeaponCall;

  constructor(call: EditWeaponCall) {
    this._call = call;
  }
}

export class GiveCopCardV1Call extends ethereum.Call {
  get inputs(): GiveCopCardV1Call__Inputs {
    return new GiveCopCardV1Call__Inputs(this);
  }

  get outputs(): GiveCopCardV1Call__Outputs {
    return new GiveCopCardV1Call__Outputs(this);
  }
}

export class GiveCopCardV1Call__Inputs {
  _call: GiveCopCardV1Call;

  constructor(call: GiveCopCardV1Call) {
    this._call = call;
  }

  get _V1player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _copIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GiveCopCardV1Call__Outputs {
  _call: GiveCopCardV1Call;

  constructor(call: GiveCopCardV1Call) {
    this._call = call;
  }

  get nameOfCop(): string {
    return this._call.outputValues[0].value.toString();
  }

  get powerOfCop(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GiveThiefCardV1Call extends ethereum.Call {
  get inputs(): GiveThiefCardV1Call__Inputs {
    return new GiveThiefCardV1Call__Inputs(this);
  }

  get outputs(): GiveThiefCardV1Call__Outputs {
    return new GiveThiefCardV1Call__Outputs(this);
  }
}

export class GiveThiefCardV1Call__Inputs {
  _call: GiveThiefCardV1Call;

  constructor(call: GiveThiefCardV1Call) {
    this._call = call;
  }

  get _V1player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _thiefIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _powerOfThief(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class GiveThiefCardV1Call__Outputs {
  _call: GiveThiefCardV1Call;

  constructor(call: GiveThiefCardV1Call) {
    this._call = call;
  }

  get nameOfThief(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class GiveWeaponV1Call extends ethereum.Call {
  get inputs(): GiveWeaponV1Call__Inputs {
    return new GiveWeaponV1Call__Inputs(this);
  }

  get outputs(): GiveWeaponV1Call__Outputs {
    return new GiveWeaponV1Call__Outputs(this);
  }
}

export class GiveWeaponV1Call__Inputs {
  _call: GiveWeaponV1Call;

  constructor(call: GiveWeaponV1Call) {
    this._call = call;
  }

  get _V1player(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weaponIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GiveWeaponV1Call__Outputs {
  _call: GiveWeaponV1Call;

  constructor(call: GiveWeaponV1Call) {
    this._call = call;
  }

  get nameOfWeapon(): string {
    return this._call.outputValues[0].value.toString();
  }

  get powerOfWeapon(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MakeOperatorCall extends ethereum.Call {
  get inputs(): MakeOperatorCall__Inputs {
    return new MakeOperatorCall__Inputs(this);
  }

  get outputs(): MakeOperatorCall__Outputs {
    return new MakeOperatorCall__Outputs(this);
  }
}

export class MakeOperatorCall__Inputs {
  _call: MakeOperatorCall;

  constructor(call: MakeOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MakeOperatorCall__Outputs {
  _call: MakeOperatorCall;

  constructor(call: MakeOperatorCall) {
    this._call = call;
  }
}

export class PauseGameCall extends ethereum.Call {
  get inputs(): PauseGameCall__Inputs {
    return new PauseGameCall__Inputs(this);
  }

  get outputs(): PauseGameCall__Outputs {
    return new PauseGameCall__Outputs(this);
  }
}

export class PauseGameCall__Inputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class PauseGameCall__Outputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class RemoveOperatorCall extends ethereum.Call {
  get inputs(): RemoveOperatorCall__Inputs {
    return new RemoveOperatorCall__Inputs(this);
  }

  get outputs(): RemoveOperatorCall__Outputs {
    return new RemoveOperatorCall__Outputs(this);
  }
}

export class RemoveOperatorCall__Inputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOperatorCall__Outputs {
  _call: RemoveOperatorCall;

  constructor(call: RemoveOperatorCall) {
    this._call = call;
  }
}

export class ResetBankAtCall extends ethereum.Call {
  get inputs(): ResetBankAtCall__Inputs {
    return new ResetBankAtCall__Inputs(this);
  }

  get outputs(): ResetBankAtCall__Outputs {
    return new ResetBankAtCall__Outputs(this);
  }
}

export class ResetBankAtCall__Inputs {
  _call: ResetBankAtCall;

  constructor(call: ResetBankAtCall) {
    this._call = call;
  }

  get _bankVaultPowerReset(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetBankAtCall__Outputs {
  _call: ResetBankAtCall;

  constructor(call: ResetBankAtCall) {
    this._call = call;
  }
}

export class RunCopCall extends ethereum.Call {
  get inputs(): RunCopCall__Inputs {
    return new RunCopCall__Inputs(this);
  }

  get outputs(): RunCopCall__Outputs {
    return new RunCopCall__Outputs(this);
  }
}

export class RunCopCall__Inputs {
  _call: RunCopCall;

  constructor(call: RunCopCall) {
    this._call = call;
  }

  get cardToUse(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RunCopCall__Outputs {
  _call: RunCopCall;

  constructor(call: RunCopCall) {
    this._call = call;
  }

  get _toCop(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _toBurn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _toRewards(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class SetCurrencyCall extends ethereum.Call {
  get inputs(): SetCurrencyCall__Inputs {
    return new SetCurrencyCall__Inputs(this);
  }

  get outputs(): SetCurrencyCall__Outputs {
    return new SetCurrencyCall__Outputs(this);
  }
}

export class SetCurrencyCall__Inputs {
  _call: SetCurrencyCall;

  constructor(call: SetCurrencyCall) {
    this._call = call;
  }

  get CryptoCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get decimal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCurrencyCall__Outputs {
  _call: SetCurrencyCall;

  constructor(call: SetCurrencyCall) {
    this._call = call;
  }
}

export class SetPercentageCutCall extends ethereum.Call {
  get inputs(): SetPercentageCutCall__Inputs {
    return new SetPercentageCutCall__Inputs(this);
  }

  get outputs(): SetPercentageCutCall__Outputs {
    return new SetPercentageCutCall__Outputs(this);
  }
}

export class SetPercentageCutCall__Inputs {
  _call: SetPercentageCutCall;

  constructor(call: SetPercentageCutCall) {
    this._call = call;
  }

  get _percentageCut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPercentageCutCall__Outputs {
  _call: SetPercentageCutCall;

  constructor(call: SetPercentageCutCall) {
    this._call = call;
  }
}

export class SetRewardPercentageCall extends ethereum.Call {
  get inputs(): SetRewardPercentageCall__Inputs {
    return new SetRewardPercentageCall__Inputs(this);
  }

  get outputs(): SetRewardPercentageCall__Outputs {
    return new SetRewardPercentageCall__Outputs(this);
  }
}

export class SetRewardPercentageCall__Inputs {
  _call: SetRewardPercentageCall;

  constructor(call: SetRewardPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardPercentageCall__Outputs {
  _call: SetRewardPercentageCall;

  constructor(call: SetRewardPercentageCall) {
    this._call = call;
  }
}

export class SetSmallPortionCall extends ethereum.Call {
  get inputs(): SetSmallPortionCall__Inputs {
    return new SetSmallPortionCall__Inputs(this);
  }

  get outputs(): SetSmallPortionCall__Outputs {
    return new SetSmallPortionCall__Outputs(this);
  }
}

export class SetSmallPortionCall__Inputs {
  _call: SetSmallPortionCall;

  constructor(call: SetSmallPortionCall) {
    this._call = call;
  }

  get _SmallPortionTreasure(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSmallPortionCall__Outputs {
  _call: SetSmallPortionCall;

  constructor(call: SetSmallPortionCall) {
    this._call = call;
  }
}

export class SetTreasureCall extends ethereum.Call {
  get inputs(): SetTreasureCall__Inputs {
    return new SetTreasureCall__Inputs(this);
  }

  get outputs(): SetTreasureCall__Outputs {
    return new SetTreasureCall__Outputs(this);
  }
}

export class SetTreasureCall__Inputs {
  _call: SetTreasureCall;

  constructor(call: SetTreasureCall) {
    this._call = call;
  }

  get CryptoCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get decimal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTreasureCall__Outputs {
  _call: SetTreasureCall;

  constructor(call: SetTreasureCall) {
    this._call = call;
  }
}

export class ShieldpriceCall extends ethereum.Call {
  get inputs(): ShieldpriceCall__Inputs {
    return new ShieldpriceCall__Inputs(this);
  }

  get outputs(): ShieldpriceCall__Outputs {
    return new ShieldpriceCall__Outputs(this);
  }
}

export class ShieldpriceCall__Inputs {
  _call: ShieldpriceCall;

  constructor(call: ShieldpriceCall) {
    this._call = call;
  }

  get _priceOfShield(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ShieldpriceCall__Outputs {
  _call: ShieldpriceCall;

  constructor(call: ShieldpriceCall) {
    this._call = call;
  }
}

export class StartHeistThiefCall extends ethereum.Call {
  get inputs(): StartHeistThiefCall__Inputs {
    return new StartHeistThiefCall__Inputs(this);
  }

  get outputs(): StartHeistThiefCall__Outputs {
    return new StartHeistThiefCall__Outputs(this);
  }
}

export class StartHeistThiefCall__Inputs {
  _call: StartHeistThiefCall;

  constructor(call: StartHeistThiefCall) {
    this._call = call;
  }

  get cardType(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cardToUse(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bankToHeist(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StartHeistThiefCall__Outputs {
  _call: StartHeistThiefCall;

  constructor(call: StartHeistThiefCall) {
    this._call = call;
  }

  get heistResult(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class StartTheGameCall extends ethereum.Call {
  get inputs(): StartTheGameCall__Inputs {
    return new StartTheGameCall__Inputs(this);
  }

  get outputs(): StartTheGameCall__Outputs {
    return new StartTheGameCall__Outputs(this);
  }
}

export class StartTheGameCall__Inputs {
  _call: StartTheGameCall;

  constructor(call: StartTheGameCall) {
    this._call = call;
  }

  get guess(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class StartTheGameCall__Outputs {
  _call: StartTheGameCall;

  constructor(call: StartTheGameCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UseWeaponCall extends ethereum.Call {
  get inputs(): UseWeaponCall__Inputs {
    return new UseWeaponCall__Inputs(this);
  }

  get outputs(): UseWeaponCall__Outputs {
    return new UseWeaponCall__Outputs(this);
  }
}

export class UseWeaponCall__Inputs {
  _call: UseWeaponCall;

  constructor(call: UseWeaponCall) {
    this._call = call;
  }

  get weaponIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cardIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UseWeaponCall__Outputs {
  _call: UseWeaponCall;

  constructor(call: UseWeaponCall) {
    this._call = call;
  }
}

export class VaultMinAmountCall extends ethereum.Call {
  get inputs(): VaultMinAmountCall__Inputs {
    return new VaultMinAmountCall__Inputs(this);
  }

  get outputs(): VaultMinAmountCall__Outputs {
    return new VaultMinAmountCall__Outputs(this);
  }
}

export class VaultMinAmountCall__Inputs {
  _call: VaultMinAmountCall;

  constructor(call: VaultMinAmountCall) {
    this._call = call;
  }

  get _vVault(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class VaultMinAmountCall__Outputs {
  _call: VaultMinAmountCall;

  constructor(call: VaultMinAmountCall) {
    this._call = call;
  }
}

export class WithdrawalBNBCall extends ethereum.Call {
  get inputs(): WithdrawalBNBCall__Inputs {
    return new WithdrawalBNBCall__Inputs(this);
  }

  get outputs(): WithdrawalBNBCall__Outputs {
    return new WithdrawalBNBCall__Outputs(this);
  }
}

export class WithdrawalBNBCall__Inputs {
  _call: WithdrawalBNBCall;

  constructor(call: WithdrawalBNBCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawalBNBCall__Outputs {
  _call: WithdrawalBNBCall;

  constructor(call: WithdrawalBNBCall) {
    this._call = call;
  }
}

export class WithdrawalTokenCall extends ethereum.Call {
  get inputs(): WithdrawalTokenCall__Inputs {
    return new WithdrawalTokenCall__Inputs(this);
  }

  get outputs(): WithdrawalTokenCall__Outputs {
    return new WithdrawalTokenCall__Outputs(this);
  }
}

export class WithdrawalTokenCall__Inputs {
  _call: WithdrawalTokenCall;

  constructor(call: WithdrawalTokenCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawalTokenCall__Outputs {
  _call: WithdrawalTokenCall;

  constructor(call: WithdrawalTokenCall) {
    this._call = call;
  }
}

export class YesCopsCall extends ethereum.Call {
  get inputs(): YesCopsCall__Inputs {
    return new YesCopsCall__Inputs(this);
  }

  get outputs(): YesCopsCall__Outputs {
    return new YesCopsCall__Outputs(this);
  }
}

export class YesCopsCall__Inputs {
  _call: YesCopsCall;

  constructor(call: YesCopsCall) {
    this._call = call;
  }

  get _copsYes(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class YesCopsCall__Outputs {
  _call: YesCopsCall;

  constructor(call: YesCopsCall) {
    this._call = call;
  }
}
